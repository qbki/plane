cmake_minimum_required(VERSION 3.15)

if(DEFINED EMSCRIPTEN)
  project(index)
  set(CMAKE_EXECUTABLE_SUFFIX ".html")
else()
  project(plane)
endif()

function(setup_link_libraries target_name)
  target_link_libraries(${target_name} Catch2::Catch2WithMain)
  target_link_libraries(${target_name} EnTT::EnTT)
  target_link_libraries(${target_name} Microsoft.GSL::GSL)
  target_link_libraries(${target_name} TinyGLTF::TinyGLTF)
  target_link_libraries(${target_name} glm::glm)
  target_link_libraries(${target_name} nlohmann_json::nlohmann_json)
  if(DEFINED EMSCRIPTEN)
    target_include_directories(${target_name} PUBLIC "${EMSCRIPTEN_SYSROOT}/include")
    target_link_libraries(${target_name} GL GLEW SDL2)
  else()
    target_link_libraries(${target_name} GLEW::GLEW)
    target_link_libraries(${target_name} SDL2::SDL2main)
  endif()
endfunction()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
set(SRC_SHADERS_DIRECTORY ${CMAKE_SOURCE_DIR}/shaders)
set(SRC_ASSETS_DIRECTORY ${CMAKE_SOURCE_DIR}/assets)
set(SHADERS_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/shaders)
set(ASSETS_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/assets)

set(JSON_ImplicitConversions, OFF)
include_directories(${CMAKE_SOURCE_DIR})

include(${CMAKE_SOURCE_DIR}/configs/cmake/utils.cmake)

find_package(Catch2 3 REQUIRED)
find_package(EnTT REQUIRED)
find_package(GLM REQUIRED)
find_package(Microsoft.GSL REQUIRED)
find_package(TinyGLTF REQUIRED)
find_package(nlohmann_json REQUIRED)

add_flag("-Wall")
add_flag("-Wextra")
add_flag("-Wpedantic")
add_flag("-pedantic-errors")
if(DEFINED EMSCRIPTEN)
  add_flag("-fexceptions")
  add_flag("-std=c++20")
  add_flag("-sUSE_SDL=2")
  add_exe_flag("--preload-file ${SRC_SHADERS_DIRECTORY}/@/shaders/")
  add_exe_flag("--shell-file ${PROJECT_SOURCE_DIR}/src/shell.html")
  add_exe_flag("-fexceptions")
  add_exe_flag("-sASYNCIFY")
  add_exe_flag("-sALLOW_MEMORY_GROWTH")
  add_exe_flag("-sEXPORT_EXCEPTION_HANDLING_HELPERS")
  add_exe_flag("-sFULL_ES3")
  add_exe_flag("-sMAX_WEBGL_VERSION=2")
  add_exe_flag("-sMIN_WEBGL_VERSION=2")
else()
  find_package(GLEW REQUIRED)
  find_package(SDL2 REQUIRED)
endif()

file(GLOB_RECURSE SOURCES src/*)
set(TEST_SOURCES ${SOURCES})
list(FILTER SOURCES EXCLUDE REGEX ".tests.cpp$")
list(FILTER TEST_SOURCES INCLUDE REGEX ".tests.cpp$")

add_executable(${PROJECT_NAME} ${SOURCES})
setup_link_libraries(${PROJECT_NAME})

if(NOT DEFINED EMSCRIPTEN)
  enable_testing()
  foreach(test_source ${TEST_SOURCES})
    set(target_name "")
    string(REPLACE "${CMAKE_SOURCE_DIR}/" "" target_name ${test_source})
    set(src_relative_path ${target_name})
    string(REPLACE ".tests.cpp" "" target_name ${target_name})
    string(REPLACE "/" "_" target_name ${target_name})
    add_executable(${target_name} ${TEST_SOURCES})
    set_target_properties(
      ${target_name}
      PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/tests)
    add_test(NAME ${src_relative_path} COMMAND tests/${target_name})
    setup_link_libraries(${target_name})
  endforeach()

  add_custom_command(
    TARGET ${PROJECT_NAME} PRE_LINK
    COMMAND ${CMAKE_COMMAND} -E create_symlink ${SRC_SHADERS_DIRECTORY} ${SHADERS_DIRECTORY})
endif()

add_custom_command(
  TARGET ${PROJECT_NAME} PRE_LINK
  COMMAND ${CMAKE_COMMAND} -E create_symlink ${SRC_ASSETS_DIRECTORY} ${ASSETS_DIRECTORY})
